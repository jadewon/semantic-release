name: "Semantic Release"
description: 'Semantic release'
inputs:
  prefix:
    description: 'version prefix'
    required: false
    default: 'v'
  node-version:
    description: 'node version'
    required: false
    default: 20
outputs:
  version:
    description: 'Release version'
    value: ${{ steps.release.outputs.version }}
  tag:
    description: 'Release tag'
    value: ${{ steps.release.outputs.tag }}

runs:
  using: "composite"
  steps:
    - name: Test1
      shell: bash
      run: |
        ls -al

    - name: Checkout
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install semantic-release
      shell: bash
      run: |
        npm install --save-dev \
          semantic-release \
          @semantic-release/commit-analyzer \
          @semantic-release/changelog \
          @semantic-release/release-notes-generator \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Test
      shell: bash
      run: |
        ls -al
        echo '${{ inputs.prefix }}${version}'
        printenv

    - name: Run semantic-release
      shell: bash
      run: |
        npx semantic-release --tag-format '${{ inputs.prefix }}${version}'

    - name: Export version
      id: release
      shell: bash
      run: |
        # semantic-release 에서 버전 생성이 안되었을 경우 수동으로 생성
        if [[ -z .VERSION ]]; then
          echo "semantic release 실패"
          # 마지막 릴리즈 버전을 가져옴
          RELEASE_VERSION=$(gh release list -L 1 --exclude-drafts | cut -f 1)
          # extra 버전 번호 초기화
          EXTRA=0
          # 프리릴리즈 여부 - semantic-release 에서 생성이 안되면 기존적으로 프리릴리즈로 생성
          IS_PRERELEASE=true

          # 버전이 없을 경우 0.0.1 로 설정 - 최초 릴리즈라면 정식릴리즈로 생성
          if [[ -z $RELEASE_VERSION ]]; then
            RELEASE_VERSION='0.0.1'
            IS_PRERELEASE=false
          # 가져온 버전의 패턴 확인
          elif [[ "$RELEASE_VERSION" =~ [0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # 버전 숫자 앞에 붙은 prefix를 제거하고 숫자만 추출 (v1.1.0 -> 1.1.0)
            RELEASE_VERSION=$(echo $RELEASE_VERSION | awk '{ gsub(/[^0-9]+/,"."); print }' | cut -c2-)
            # extra 버전 번호까지 있다면 extra를 분리
            if [[ "$RELEASE_VERSION" =~ [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              EXTRA=$(echo "$RELEASE_VERSION" | cut -f4- -d'.')
              RELEASE_VERSION=$(echo "$RELEASE_VERSION" | cut -f1-3 -d'.')
            fi
          fi

          # release
          if [[ $IS_PRERELEASE == true ]]; then
            # 프리릴리즈라면 EXTRA를 증가시킴
            RELEASE_VERSION=$(echo "$RELEASE_VERSION.$(($EXTRA + 1))")
            # 새 버전 문자열 생성
            RELEASE_VERSION_TAG=$(echo "${PREFIX}${RELEASE_VERSION}")
            gh release create ${RELEASE_VERSION_TAG} --prerelease -t ${RELEASE_VERSION_TAG}
          else
            # 새 버전 문자열 생성
            RELEASE_VERSION_TAG=$(echo "${PREFIX}${RELEASE_VERSION}")
            gh release create ${RELEASE_VERSION_TAG} -t ${RELEASE_VERSION_TAG}
          fi
        else
          echo "semantic release 성공"
          RELEASE_VERSION=$(cat .VERSION)
          RELEASE_VERSION_TAG=$(echo "${PREFIX}${RELEASE_VERSION}")
        fi
        echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$RELEASE_VERSION_TAG" >> $GITHUB_OUTPUT

    # - name: Run release.sh
    #   id: release
    #   shell: bash
    #   run: |
    #     ${{ github.action_path }}/release.sh "${{ inputs.prefix }}"
